
/**
 * A Park-Miller-Carta Seeded Psuedo-Random number generator. Two instances
 * of this generator that were created with the same seed should generate the
 * same sequence of numbers.
 */
export default class Random {
  /** The high value for the random */
  public static readonly HI = 0x7FFFFFFF

  /** The low value for the random */
  public static readonly LO = 0x41A7

  /**
   * Attempts to pseudo-randomly generate a seed based on the current time
   * @returns The generated seed string
   */
  public static generate (): number {
    return Math.floor(Math.random() * Random.HI)
  }

  /** This random's seed */
  public readonly seed: number

  private value: number

  /**
   * Creates a new random from the given seed, optionally re-starting from a given value
   * @param seed  The seed to work from
   * @param value A start-point value
   */
  constructor (seed: number, value?: number) {
    this.seed = seed
    this.value = value || seed % Random.HI
    if (this.value <= 0) this.value += Random.HI - 1
  }

  /** The current internal value */
  public get currentValue (): number {
    return this.value
  }

  /**
   * Gets the next number generated by this random
   * @returns The next number
   */
  public next (): number {
    return this.value = this.value * Random.LO % Random.HI
  }

  /**
   * Gets the next number be between 0 and 1 for this random
   * @returns The number
   */
  public nextFloat (): number {
    return (this.next() - 1) / (Random.HI - 1)
  }

  /**
   * Gets the next integer value from this random, between 0 (inclusive)
   * and the given bound (exclusive)
   * @param bound The upper bound for the random
   * @returns The number
   */
  public nextInt (bound = 100): number {
    return Math.floor(this.nextFloat() * bound)
  }
}
