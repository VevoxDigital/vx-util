
/**
 * A Lehmer Seeded Psuedo-Random number generator. Two instances
 * of this generator that were created with the same seed should generate the
 * same sequence of numbers.
 */
export class Random {

  /** The high value for the BigInt random */
  public static readonly HI = (2n ** 48n) - 1n

  /** The low value for the BigInt random */
  public static readonly LO = 0x2875A2E7B175n

  // see the wiki article on Lehmer number generators for where these numbers came from
  // this is using numerical values from CRAY's RANF generator.
  // https://en.wikipedia.org/wiki/Lehmer_random_number_generator

  /**
   * Generates a BigInt seed based a few factors
   */
  public static seed (): bigint {
    const gen: Functional.Producer<number> = () => Math.floor(Math.random() * (10 ** 8))
    return BigInt(gen().toString(10) + gen().toString(10))
  }

  /** This random's seed */
  public readonly seed: bigint

  private value: bigint

  /**
   * Creates a new random from the given BigInt seed, optionally re-starting from a given value
   * @param seed  The seed to work from
   * @param value A start-point value
   */
  constructor (seed: bigint, value?: bigint)
  constructor (seed: number, value?: number)
  constructor (seed: bigint | number, value?: bigint | number) {
    this.seed = BigInt(seed)
    this.value = value ? BigInt(value) : this.seed % Random.HI
    if (this.value <= 0) this.value += Random.HI - 1n
  }

  /** The current internal value */
  public get currentValue (): bigint {
    return this.value
  }

  /**
   * Gets the next `BigInt` generated by this Random
   */
  public next (bound?: number | bigint): bigint {
    this.value = this.value * Random.LO % Random.HI
    return bound ? this.value % BigInt(bound) : this.value
  }

  /**
   * Gets the next `number` generated by this Random
   */
  public nextInt (bound?: number): number {
    let next = this.next(bound)
    if (next > BigInt(Number.MAX_SAFE_INTEGER)) next -= BigInt(Number.MAX_SAFE_INTEGER)
    return Number(next)
  }

  /**
   * Gets the next number be between 0 and 1 for this random
   */
  public nextFloat (): number {
    return (this.nextInt() - 1) / (Number.MAX_SAFE_INTEGER - 1)
  }
}
