import { Signal } from '../event/signal'

/**
 * A Lehmer Seeded Psuedo-Random number generator. Two instances
 * of this generator that were created with the same seed should generate the
 * same sequence of numbers.
 */
export class Random {

  /** The high value for the random */
  public static readonly HI = (2 ** 48) - 1

  /** The low value for the random */
  public static readonly LO = 0x2875A2E7B175

  // see the wiki article on Lehmer number generators for where these numbers came from
  // this is using numerical values from CRAY's RANF generator.
  // https://en.wikipedia.org/wiki/Lehmer_random_number_generator

  /**
   * Generates a seed based a few factors
   */
  public static seed (): number {
    return Math.floor(Math.random() * (10 ** 8))
  }

  /** This random's seed */
  public readonly seed: number

  /**
   * *Signal*: A new value was generated from this random
   * @param value The generated value
   */
  public readonly generated = new Signal<[number]>()

  private value: number

  /**
   * Creates a new random from the given seed, optionally re-starting from a given value
   * @param seed  The seed to work from
   * @param value A start-point value
   */
  constructor (seed: number, value?: number) {
    this.seed = seed
    this.value = value || this.seed % Random.HI
    if (this.value <= 0) this.value += Random.HI - 1
  }

  /** The current internal value */
  public get currentValue (): number {
    return this.value
  }

  /**
   * Gets the next number generated by this Random
   */
  public next (bound?: number): number {
    this.value = this.value * Random.LO % Random.HI
    const next = bound ? this.value % bound : this.value
    this.generated.fire(next)
    return next
  }

  /**
   * Gets the next `number` generated by this Random
   */
  public nextInt (bound?: number): number {
    return Math.floor(this.next(bound))
  }

  /**
   * Gets the next number be between 0 and 1 for this random
   */
  public nextFloat (): number {
    return (this.nextInt() - 1) / (Random.HI - 1)
  }
}
